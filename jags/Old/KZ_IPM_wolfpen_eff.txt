model{
	
	#  Data are all lower case
	# c = control pop unit
	# p = pen pop unit
	# sa = sub-adult
	# a  = adult
	# sac = sub-adult control
	# sap = sub-adult pen
	# ac = adult control
	# ap = adult pen

	##########################################################################
	#  Priors

	#  In data, meanr and means structured as: nrow = 4, ncol = 2, narray = 2
	#   row = age and col 1 = control and col 2 = pen, array 1 = mu, array 2 = tau
	
	#  Recruitment 
	cR_mu ~ dnorm(log(meanr[4,1,1]/(1 - meanr[4,1,1])), meanr[4,1,2])T(-10,10)
	# meanr[age, pop, mean:tau]
	# R[yr,pop]
	
	#  Survival 
	#   Survival of first age class (calves) included in recruitment parameter 
	sacS_mu ~ dnorm(log(means[2,1,1]/(1 - means[2,1,1])), means[2,1,2])T(-10,10)
	sapS_mu ~ dnorm(log(means[2,2,1]/(1 - means[2,2,1])), means[2,2,2])T(-10,10)
	acS_mu ~ dnorm(log(means[4,1,1]/(1 - means[4,1,1])), means[4,1,2])T(-10,10)
	apS_mu ~ dnorm(log(means[4,2,1]/(1 - means[4,2,1])), means[4,2,2])T(-10,10)
	# means[age, pop, mean:tau]
	# S[yr, age, pop]

	#  Transform probability back to real scale and use as the intercept
	# Year, Age, Pop unit
	wolfpen_eff_s ~ dnorm(0, 0.001)
	wolfpen_eff_r ~ dnorm(0, 0.001)
	
	for(yr in 1:13){
		logit(S[yr,2,1]) <- sacS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,2,2]) <- 0
		logit(S[yr,3,1]) <- sacS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,3,2]) <- 0
		logit(S[yr,4,1]) <- acS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,4,2]) <- 0
		logit(R[yr,1]) <- cR_mu + wolfpen_eff_r*wolfpen_ind[yr]
		}
		
	for(yr in 14:nyr){
		logit(S[yr,2,1]) <- sacS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,2,2]) <- sapS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,3,1]) <- sacS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,3,2]) <- sapS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,4,1]) <- acS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(S[yr,4,2]) <- apS_mu + wolfpen_eff_s*wolfpen_ind[yr]
		logit(R[yr,1]) <- cR_mu + wolfpen_eff_r*wolfpen_ind[yr]
		}
		

	
	##########################################################################
	#  Process model - 3 ages, 2 pop
	#  Using normal approximation because it is fast and mixes well
	#  Pop = 1 is Control, Pop = 2 is Pen
	#  Indexing follows - Year, Age, Pop
	
	# First year population size
	#  In data, n1 should be arranged as: nrow = 4, ncol = 2
	#   row = age and col 1 = control and col 2 = pen
	# N[yr, age, pop]
	
	N[1,1,1] ~ dnorm(n1[1], 1/(20 * n1[1]))T(0,)
	N[1,2,1] ~ dnorm(n1[2], 1/(20 * n1[2]))T(0,)
	N[1,3,1] ~ dnorm(n1[3], 1/(20 * n1[3]))T(0,)
	N[1,4,1] ~ dnorm(n1[4], 1/(20 * n1[4]))T(0,)
	
	N[1,1,2] <- 0
	N[1,2,2] <- 0
	N[1,3,2] <- 0
	N[1,4,2] <- 0

	totCalvesC[1] <- N[1,1,1] 
	totCalvesP[1] <- 0 
	totCalves[1] <- totCalvesC[1] + totCalvesP[1]
	
	totAdultsC[1] <- N[1,2,1] + N[1,3,1] + N[1,4,1] 
	totAdultsP[1] <- 0
	totAdultsN[1] <- totAdultsC[1] + totAdultsP[1]

	totC[1] <- N[1,1,1] + N[1,2,1] + N[1,3,1] + N[1,4,1] 
	totP[1] <- 0
	totN[1] <- totC[1] + totP[1]


	for(yr in 2:nyr){
		
		#  Population size of eachage class in pop. unit 1 before any removal for mat pen
		nBeforeRemoval[yr,2,1] <- (N[yr-1,1,1] * S[yr-1,2,1]) + (N[yr-1,1,2] * S[yr-1,2,1]) 
		nBeforeRemoval[yr,3,1] <- (N[yr-1,2,1] * S[yr-1,3,1]) + (N[yr-1,2,2] * S[yr-1,3,2])
		nBeforeRemoval[yr,4,1] <- ((N[yr-1,4,1] + N[yr-1,3,1]) * S[yr-1,4,1])  + ((N[yr-1,4,2] + N[yr-1,3,2]) * S[yr-1,4,2])
		
		# Number of individuals going into pen (pup. unit 2) is a direct proportion of each age class in the population.
		prop_sa1[yr] <- nBeforeRemoval[yr,2,1] / (nBeforeRemoval[yr,2,1] + nBeforeRemoval[yr,3,1] + nBeforeRemoval[yr,4,1])
		prop_sa2[yr] <- nBeforeRemoval[yr,3,1] / (nBeforeRemoval[yr,2,1] + nBeforeRemoval[yr,3,1] + nBeforeRemoval[yr,4,1])
		prop_a[yr] <- nBeforeRemoval[yr,4,1] / (nBeforeRemoval[yr,2,1] + nBeforeRemoval[yr,3,1] + nBeforeRemoval[yr,4,1])
		N[yr,2,2] <- prop_sa1[yr]*nPenInF[yr]
		N[yr,3,2] <- prop_sa2[yr]*nPenInF[yr]
		N[yr,4,2] <- prop_a[yr]*nPenInF[yr]

		#  Calves - Normal approximation of Poisson
		nMu[yr,1,1] <- N[yr,4,1] * R[yr,1] 
		N[yr,1,1] ~ dnorm(nMu[yr,1,1], 1/abs(nMu[yr,1,1]))
		N[yr,1,2] <- nPenC[yr] 
		
		#  SubAdults yr 1 - Normal approximation of Binomial
		nMu[yr,2,1] <- (N[yr-1,1,1] * S[yr-1,2,1]) + (N[yr-1,1,2] * S[yr-1,2,2]) - N[yr,2,2]
		nTau[yr,2,1] <-1/abs((N[yr-1,1,1] + 1) * S[yr-1,2,1] * (1 - S[yr-1,2,1]))
		N[yr,2,1] ~ dnorm(nMu[yr,2,1], nTau[yr,2,1])T(0,)
	
		#  SubAdults yr 2 - Normal approximation of Binomial
		nMu[yr,3,1] <- (N[yr-1,2,1] * S[yr-1,3,1]) + (N[yr-1,2,2] * S[yr-1,3,2]) - N[yr,3,2]
		nTau[yr,3,1] <- 1/abs((N[yr-1,2,1] + 1) * S[yr-1,3,1] * (1 - S[yr-1,3,1]))
		N[yr,3,1] ~ dnorm(nMu[yr,3,1], nTau[yr,3,1])T(0,)
		
		#  Adults - Normal approximation of Binomial
		nMu[yr,4,1] <- ((N[yr-1,4,1] + N[yr-1,3,1]) * S[yr-1,4,1])  + ((N[yr-1,4,2] + N[yr-1,3,2]) * S[yr-1,4,2]) - N[yr,4,2] 
		nTau[yr,4,1] <- 1/abs(((N[yr-1,4,1] + N[yr-1,3,1]) * S[yr-1,4,1] * (1 - S[yr-1,4,1])) + (N[yr-1,4,2] + N[yr-1,3,2]) * S[yr-1,4,2] * (1 - S[yr-1,4,2]))
		N[yr,4,1] ~ dnorm(nMu[yr,4,1], nTau[yr,4,1])T(0,)

		#  Totals in each year
		totCalvesC[yr] <- N[yr,1,1] 
		totCalvesP[yr] <- N[yr,1,2] 
		totCalves[yr] <- totCalvesC[yr] + totCalvesP[yr]
		
		totAdultsC[yr] <- N[yr,2,1] + N[yr,3,1] + N[yr,4,1] 
		totAdultsP[yr] <- N[yr,2,2] + N[yr,3,2] + N[yr,4,2] 
		totAdultsN[yr] <- totAdultsC[yr] + totAdultsP[yr]

		totC[yr] <- totCalvesC[yr] + totAdultsC[yr]
		totP[yr] <- totCalvesP[yr] + totAdultsP[yr]
		totN[yr] <- totC[yr] + totP[yr]
		
		}
		
	
	##########################################################################
	#  Observation Models
	#  Indexing/columns of data inputs:
	#    1   2     3    4    5    6
	#  DAU, Year, Age, Pop, Mean, Tau
	#  Note: we are keeping the indexing even though DAU doesn't apply

	#  Potential model for minimum counts
	r ~ dunif(0, 5000)
	for(i in 1:nmin){
		mu[i] <- r/(r + totN[mindat[i,2]])
		mindat[i,5] ~ dnegbin(mu[i], r)
		#totN[yr]
		}

	#  Survival Observations 
	for(i in 1:ns){
		sdat[i,5] ~ dnorm(S[sdat[i,2], sdat[i,3], sdat[i,4]], sdat[i,6])T(0,1)
		#S[yr, age, pop]
		}

	#  Recruitment Observations
	for(i in 1:nr){
		rdat[i,5] ~ dnorm(R[rdat[i,2], rdat[i,4]], rdat[i,6])
		#R[yr,pop]
	   }
		
	#  Derived - the constant is added to avoid division by 0
	lambda[1] <- 1
	
	for(yr in 2:nyr){
		lambda[yr] <- (totN[yr] + 0.001)/abs(totN[yr-1] + 0.001)
		logla[yr] <- log(ifelse(lambda[yr] < 0.0001, 0.01, lambda[yr]))
		lambdaC[yr] <- (totC[yr] + 0.001)/abs(totC[yr-1] + 0.001)
		}
	
	geom_mean_lambda <- (exp(1)^sum(logla[2:nyr]))^(1/(nyr-1))
	
	geom_mean_lambda_prepen <- (exp(1)^sum(logla[2:13]))^(1/11)
	geom_mean_lambda_postpen <- (exp(1)^sum(logla[14:nyr]))^(1/5)
	diff_geom_mean_lambda_post_to_pre <- geom_mean_lambda_postpen - geom_mean_lambda_prepen
	
	}
	
	